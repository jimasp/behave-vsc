import * as vscode from 'vscode';
import { Configuration } from "../../configuration";
import { WkspParseCounts } from "../../parsers/fileParser";
import { TestResult, applyTestConfiguration } from "../suite-shared/expectedResults.helpers";

export function getExpectedCounts(wkspUri: vscode.Uri, config: Configuration): WkspParseCounts {
  const testCount = getExpectedResults(wkspUri, config).length;
  return {
    tests: { nodeCount: 81, testCount: testCount },
    featureFilesExceptEmptyOrCommentedOut: 17, stepFilesExceptEmptyOrCommentedOut: 9,
    stepFileStepsExceptCommentedOut: 47,
    featureFileStepsExceptCommentedOut: 128, stepMappings: 127  // (1 diff = "When we have a missing step")
  };
}

export const getExpectedResults = (wkspUri: vscode.Uri, config: Configuration): TestResult[] => {

  const expectedResults: TestResult[] = [
    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/basic.feature',
      scenario_featureName: 'Basic',
      scenario_getLabel: 'run a successful test',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run a successful test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/basic.feature/run a successful test',
      test_label: 'run a successful test',
      test_parent: '.../project B/{{featurePath}}/basic.feature',
      test_uri: '.../project B/{{featurePath}}/basic.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/basic.feature',
      scenario_featureName: 'Basic',
      scenario_getLabel: 'run a slow test for async testing',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run a slow test for async testing',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/basic.feature/run a slow test for async testing',
      test_label: 'run a slow test for async testing',
      test_parent: '.../project B/{{featurePath}}/basic.feature',
      test_uri: '.../project B/{{featurePath}}/basic.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/basic.feature',
      scenario_featureName: 'Basic',
      scenario_getLabel: 'run another slow test for async testing',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run another slow test for async testing',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/basic.feature/run another slow test for async testing',
      test_label: 'run another slow test for async testing',
      test_parent: '.../project B/{{featurePath}}/basic.feature',
      test_uri: '.../project B/{{featurePath}}/basic.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/basic.feature',
      scenario_featureName: 'Basic',
      scenario_getLabel: 'run a failing test',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'run a failing test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/basic.feature/run a failing test',
      test_label: 'run a failing test',
      test_parent: '.../project B/{{featurePath}}/basic.feature',
      test_uri: '.../project B/{{featurePath}}/basic.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/basic.feature',
      scenario_featureName: 'Basic',
      scenario_getLabel: 'run another successful test',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run another successful test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/basic.feature/run another successful test',
      test_label: 'run another successful test',
      test_parent: '.../project B/{{featurePath}}/basic.feature',
      test_uri: '.../project B/{{featurePath}}/basic.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/basic.feature',
      scenario_featureName: 'Basic',
      scenario_getLabel: 'run a test with a missing steps',
      scenario_isOutline: false,
      scenario_result: "failed",
      scenario_scenarioName: 'run a test with a missing steps',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/basic.feature/run a test with a missing steps',
      test_label: 'run a test with a missing steps',
      test_parent: '.../project B/{{featurePath}}/basic.feature',
      test_uri: '.../project B/{{featurePath}}/basic.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/basic.feature',
      scenario_featureName: 'Basic',
      scenario_getLabel: 'run a skipped test',
      scenario_isOutline: false,
      scenario_result: 'skipped',
      scenario_scenarioName: 'run a skipped test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/basic.feature/run a skipped test',
      test_label: 'run a skipped test',
      test_parent: '.../project B/{{featurePath}}/basic.feature',
      test_uri: '.../project B/{{featurePath}}/basic.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/contains_regexchars.feature',
      scenario_featureName: 'Containing /[.*+?^${}()|[\\]\\ regex chars',
      scenario_getLabel: 'run a successful scenario containing a characters test /[.*+?^${}()|[\\]\\',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run a successful scenario containing a characters test /[.*+?^${}()|[\\]\\',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/contains_regexchars.feature/run a successful scenario containing a characters test /[.*+?^${}()|[\\]\\',
      test_label: 'run a successful scenario containing a characters test /[.*+?^${}()|[\\]\\',
      test_parent: '.../project B/{{featurePath}}/contains_regexchars.feature',
      test_uri: '.../project B/{{featurePath}}/contains_regexchars.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/skipped.feature',
      scenario_featureName: 'skipped feature',
      scenario_getLabel: 'scenario that will be skipped',
      scenario_isOutline: false,
      scenario_result: 'skipped',
      scenario_scenarioName: 'scenario that will be skipped',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/skipped.feature/scenario that will be skipped',
      test_label: 'scenario that will be skipped',
      test_parent: '.../project B/features/skipped.feature',
      test_uri: '.../project B/features/skipped.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/duplicate.feature',
      scenario_featureName: 'Duplicate',
      scenario_getLabel: 'run a test',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run a test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/duplicate.feature/run a test',
      test_label: 'run a test',
      test_parent: '.../project B/{{featurePath}}/duplicate.feature',
      test_uri: '.../project B/{{featurePath}}/duplicate.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/duplicate.feature',
      scenario_featureName: 'Duplicate',
      scenario_getLabel: 'run a test',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'run a test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/duplicate.feature/run a test',
      test_label: 'run a test',
      test_parent: '.../project B/{{featurePath}}/grouped/duplicate.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/duplicate.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/outline_mixed.feature',
      scenario_featureName: 'Mixed outline',
      scenario_getLabel: 'Blenders Success',
      scenario_isOutline: true,
      scenario_result: 'passed',
      scenario_scenarioName: 'Blenders Success',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/outline_mixed.feature/Blenders Success',
      test_label: 'Blenders Success',
      test_parent: '.../project B/{{featurePath}}/grouped/outline_mixed.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/outline_mixed.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/outline_mixed.feature',
      scenario_featureName: 'Mixed outline',
      scenario_getLabel: 'Blenders Fail',
      scenario_isOutline: true,
      scenario_result: 'failed',
      scenario_scenarioName: 'Blenders Fail',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/outline_mixed.feature/Blenders Fail',
      test_label: 'Blenders Fail',
      test_parent: '.../project B/{{featurePath}}/grouped/outline_mixed.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/outline_mixed.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/outline_mixed.feature',
      scenario_featureName: 'Mixed outline',
      scenario_getLabel: 'Blenders Fail 2',
      scenario_isOutline: true,
      scenario_result: 'failed',
      scenario_scenarioName: 'Blenders Fail 2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/outline_mixed.feature/Blenders Fail 2',
      test_label: 'Blenders Fail 2',
      test_parent: '.../project B/{{featurePath}}/grouped/outline_mixed.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/outline_mixed.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/outline_mixed.feature',
      scenario_featureName: 'Mixed outline',
      scenario_getLabel: 'Blenders Skip',
      scenario_isOutline: true,
      scenario_result: 'skipped',
      scenario_scenarioName: 'Blenders Skip',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/outline_mixed.feature/Blenders Skip',
      test_label: 'Blenders Skip',
      test_parent: '.../project B/{{featurePath}}/grouped/outline_mixed.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/outline_mixed.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/outline_mixed.feature',
      scenario_featureName: 'Mixed outline',
      scenario_getLabel: 'Blenders Success 2',
      scenario_isOutline: true,
      scenario_result: 'passed',
      scenario_scenarioName: 'Blenders Success 2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/outline_mixed.feature/Blenders Success 2',
      test_label: 'Blenders Success 2',
      test_parent: '.../project B/{{featurePath}}/grouped/outline_mixed.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/outline_mixed.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/outline_success.feature',
      scenario_featureName: 'Outline success',
      scenario_getLabel: 'Blend Success',
      scenario_isOutline: true,
      scenario_result: 'passed',
      scenario_scenarioName: 'Blend Success',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/outline_success.feature/Blend Success',
      test_label: 'Blend Success',
      test_parent: '.../project B/{{featurePath}}/grouped/outline_success.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/outline_success.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/outline_success.feature',
      scenario_featureName: 'Outline success',
      scenario_getLabel: 'Blend Success 2',
      scenario_isOutline: true,
      scenario_result: 'passed',
      scenario_scenarioName: 'Blend Success 2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/outline_success.feature/Blend Success 2',
      test_label: 'Blend Success 2',
      test_parent: '.../project B/{{featurePath}}/grouped/outline_success.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/outline_success.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped2/table.feature',
      scenario_featureName: 'Table feature',
      scenario_getLabel: 'Use a table (fail)',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'Use a table (fail)',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped2/table.feature/Use a table (fail)',
      test_label: 'Use a table (fail)',
      test_parent: '.../project B/{{featurePath}}/grouped2/table.feature',
      test_uri: '.../project B/{{featurePath}}/grouped2/table.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped2/table.feature',
      scenario_featureName: 'Table feature',
      scenario_getLabel: 'Use a table (success)',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'Use a table (success)',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped2/table.feature/Use a table (success)',
      test_label: 'Use a table (success)',
      test_parent: '.../project B/{{featurePath}}/grouped2/table.feature',
      test_uri: '.../project B/{{featurePath}}/grouped2/table.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/textblock.feature',
      scenario_featureName: 'Text block',
      scenario_getLabel: 'run a failing textblock test',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'run a failing textblock test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/textblock.feature/run a failing textblock test',
      test_label: 'run a failing textblock test',
      test_parent: '.../project B/{{featurePath}}/grouped/textblock.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/textblock.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/grouped/textblock.feature',
      scenario_featureName: 'Text block',
      scenario_getLabel: 'run a successful textblock test',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run a successful textblock test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/grouped/textblock.feature/run a successful textblock test',
      test_label: 'run a successful textblock test',
      test_parent: '.../project B/{{featurePath}}/grouped/textblock.feature',
      test_uri: '.../project B/{{featurePath}}/grouped/textblock.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '...features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'create a before hook-error',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'create a before hook-error',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/feature_with_hook_error.feature/create a before hook-error',
      test_label: 'create a before hook-error',
      test_parent: '.../project B/{{featurePath}}/feature_with_hook_error.feature',
      test_uri: '.../project B/{{featurePath}}/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'scenario in with a hook-error feature that will be skipped',
      scenario_isOutline: false,
      scenario_result: 'skipped',
      scenario_scenarioName: 'scenario in with a hook-error feature that will be skipped',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/feature_with_hook_error.feature/scenario in with a hook-error feature that will be skipped',
      test_label: 'scenario in with a hook-error feature that will be skipped',
      test_parent: '.../project B/features/feature_with_hook_error.feature',
      test_uri: '.../project B/features/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '...features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'skip a before hook-error',
      scenario_isOutline: false,
      scenario_result: 'skipped',
      scenario_scenarioName: 'skip a before hook-error',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/feature_with_hook_error.feature/skip a before hook-error',
      test_label: 'skip a before hook-error',
      test_parent: '.../project B/{{featurePath}}/feature_with_hook_error.feature',
      test_uri: '.../project B/{{featurePath}}/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '...features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'create a before hook-error again',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'create a before hook-error again',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/feature_with_hook_error.feature/create a before hook-error again',
      test_label: 'create a before hook-error again',
      test_parent: '.../project B/{{featurePath}}/feature_with_hook_error.feature',
      test_uri: '.../project B/{{featurePath}}/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '...features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'create an after hook-error',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'create an after hook-error',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/feature_with_hook_error.feature/create an after hook-error',
      test_label: 'create an after hook-error',
      test_parent: '.../project B/{{featurePath}}/feature_with_hook_error.feature',
      test_uri: '.../project B/{{featurePath}}/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'another scenario in with a hook-error feature that will be skipped',
      scenario_isOutline: false,
      scenario_result: 'skipped',
      scenario_scenarioName: 'another scenario in with a hook-error feature that will be skipped',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/feature_with_hook_error.feature/anoter scenario in with a hook-error feature that will be skipped',
      test_label: 'another scenario in with a hook-error feature that will be skipped',
      test_parent: '.../project B/features/feature_with_hook_error.feature',
      test_uri: '.../project B/features/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '...features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'skip an after hook-error',
      scenario_isOutline: false,
      scenario_result: 'skipped',
      scenario_scenarioName: 'skip an after hook-error',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/feature_with_hook_error.feature/skip an after hook-error',
      test_label: 'skip an after hook-error',
      test_parent: '.../project B/{{featurePath}}/feature_with_hook_error.feature',
      test_uri: '.../project B/{{featurePath}}/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '...features/feature_with_hook_error.feature',
      scenario_featureName: 'With a hook-error',
      scenario_getLabel: 'create an after hook-error again',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'create an after hook-error again',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/feature_with_hook_error.feature/create an after hook-error again',
      test_label: 'create an after hook-error again',
      test_parent: '.../project B/{{featurePath}}/feature_with_hook_error.feature',
      test_uri: '.../project B/{{featurePath}}/feature_with_hook_error.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'simple step',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'simple step',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/simple step',
      test_label: 'simple step',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'simple step with more text',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'simple step with more text',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/simple step with more text',
      test_label: 'simple step with more text',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'a cased step',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'a cased step',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/a cased step',
      test_label: 'a cased step',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'param step',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'param step',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/param step',
      test_label: 'param step',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'param step with more text',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'param step with more text',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/param step with more text',
      test_label: 'param step with more text',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'two param step no1',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'two param step no1',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/two param step no1',
      test_label: 'two param step no1',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'two param step no2',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'two param step no2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/two param step no2',
      test_label: 'two param step no2',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'step with param',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'step with param',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/step with param',
      test_label: 'step with param',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'step without custom flag type',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'step without custom flag type',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/step without custom flag type',
      test_label: 'step without custom flag type',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'step with custom flag type present',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'step with custom flag type present',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/step with custom flag type present',
      test_label: 'step with custom flag type present',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'yet another step',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'yet another step',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/yet another step',
      test_label: 'yet another step',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: '"yet" "another" step double quoted',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: '"yet" "another" step double quoted',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/"yet" "another" step double quoted',
      test_label: '"yet" "another" step double quoted',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: "'yet' 'another' step single quoted",
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: "'yet' 'another' step single quoted",
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: ".../project B/{{featurePath}}/goto_step.feature/'yet' 'another' step single quoted",
      test_label: "'yet' 'another' step single quoted",
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'wrapped step 1',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'wrapped step 1',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/wrapped step 1',
      test_label: 'wrapped step 1',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'wrapped step 2',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'wrapped step 2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/wrapped step 2',
      test_label: 'wrapped step 2',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature',
    }),

    new TestResult({
      scenario_featureFileRelativePath: '{{featurePath}}/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'wrapped step 3',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'wrapped step 3',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/{{featurePath}}/goto_step.feature/wrapped step 3',
      test_label: 'wrapped step 3',
      test_parent: '.../project B/{{featurePath}}/goto_step.feature',
      test_uri: '.../project B/{{featurePath}}/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'wrapped step 4',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'wrapped step 4',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/wrapped step 4',
      test_label: 'wrapped step 4',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/nested/nested1.faildupe.feature',
      scenario_featureName: 'Nested Duplicate',
      scenario_getLabel: 'run a test',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'run a test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/nested/nested1.faildupe.feature/run a test',
      test_label: 'run a test',
      test_parent: '.../project B/features/nested/nested1.faildupe.feature',
      test_uri: '.../project B/features/nested/nested1.faildupe.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/nested/nested/nested/nested3.sucessdupe.feature',
      scenario_featureName: 'Nested Duplicate',
      scenario_getLabel: 'run a test',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run a test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/nested/nested/nested/nested3.sucessdupe.feature/run a test',
      test_label: 'run a test',
      test_parent: '.../project B/features/nested/nested/nested/nested3.sucessdupe.feature',
      test_uri: '.../project B/features/nested/nested/nested/nested3.sucessdupe.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/nested/nested/nested2.successdupe.feature',
      scenario_featureName: 'Nested Duplicate',
      scenario_getLabel: 'run a test',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'run a test',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/nested/nested/nested2.successdupe.feature/run a test',
      test_label: 'run a test',
      test_parent: '.../project B/features/nested/nested/nested2.successdupe.feature',
      test_uri: '.../project B/features/nested/nested/nested2.successdupe.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/step_exception.feature',
      scenario_featureName: 'Bad step',
      scenario_getLabel: 'step with exception should show failure message',
      scenario_isOutline: false,
      scenario_result: 'failed',
      scenario_scenarioName: 'step with exception should show failure message',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/step_exception.feature/step with exception should show failure message',
      test_label: 'step with exception should show failure message',
      test_parent: '.../project B/features/step_exception.feature',
      test_uri: '.../project B/features/step_exception.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'step types 1',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'step types 1',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/step types 1',
      test_label: 'step types 1',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'step types 2',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'step types 2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/step types 2',
      test_label: 'step types 2',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'a cased step2',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'a cased step2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/a cased step2',
      test_label: 'a cased step2',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'step with param2',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'step with param2',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/step with param2',
      test_label: 'step with param2',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/background.feature',
      scenario_featureName: 'With background',
      scenario_getLabel: 'add',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'add',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/background.feature/add',
      test_label: 'add',
      test_parent: '.../project B/features/background.feature',
      test_uri: '.../project B/features/background.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/background.feature',
      scenario_featureName: 'With background',
      scenario_getLabel: 'multiply',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'multiply',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/background.feature/multiply',
      test_label: 'multiply',
      test_parent: '.../project B/features/background.feature',
      test_uri: '.../project B/features/background.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: 'u string with foo',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: 'u string with foo',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/u string with foo',
      test_label: 'u string with foo',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: '@behave style',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: '@behave style',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/@behave style',
      test_label: '@behave style',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature'
    }),

    new TestResult({
      scenario_featureFileRelativePath: 'features/goto_step.feature',
      scenario_featureName: 'Go to Step def tests',
      scenario_getLabel: '@behave style wrapped',
      scenario_isOutline: false,
      scenario_result: 'passed',
      scenario_scenarioName: '@behave style wrapped',
      test_children: undefined,
      test_description: undefined,
      test_error: undefined,
      test_id: '.../project B/features/goto_step.feature/@behave style wrapped',
      test_label: '@behave style wrapped',
      test_parent: '.../project B/features/goto_step.feature',
      test_uri: '.../project B/features/goto_step.feature',
    }),

  ];


  const wkspSettings = config.workspaceSettings[wkspUri.path];
  return applyTestConfiguration(wkspSettings, expectedResults);
}


