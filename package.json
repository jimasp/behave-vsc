{
	"contributes": {
		"configuration": {
			"title": "behave-vsc",
			"properties": {
				"behave-vsc.behaveWorkingDirectory": {
					"scope": "resource",
					"type": "string",
					"markdownDescription": "The project-relative behave working directory (only required if it is not the project root)."
				},
				"behave-vsc.envVarOverrides": {
					"scope": "resource",
					"type": "object",
					"deprecationMessage": "This setting is deprecated (renamed). Please use the \"env\" setting.",
					"additionalProperties": {
						"type": "string"
					}
				},
				"behave-vsc.env": {
					"scope": "resource",
					"type": "object",
					"markdownDescription": "Key-value pairs of environment variable overrides (or additions) to use when calling a behave command. This will apply to all behave tests within the project folder. Note that environment variables can also be set per run by using the `runProfiles` setting.",
					"additionalProperties": {
						"type": "string"
					}
				},
				"behave-vsc.featuresPath": {
					"scope": "resource",
					"type": "string",
					"deprecationMessage": "IGNORED legacy setting. Feature paths are now auto-discovered and controlled by the \"behaveWorkingDirectory\" setting and/or behave config file \"paths\".",
					"default": "features"
				},
				"behave-vsc.importedSteps": {
					"scope": "resource",
					"type": "object",
					"markdownDescription": "Key-value pairs of additional imported steps to include for step navigation (e.g. step libraries that are not in your \"steps\" folder). Each pair has a key of a *project-relative* path to a folder inside the project, and a value of a regex (not glob) of step files to include. See the readme for an example.",
					"additionalProperties": {
						"type": "string"
					}
				},
				"behave-vsc.justMyCode": {
					"scope": "resource",
					"type": "boolean",
					"markdownDescription": "If set to false (disabled), the debugger will step into external code when debugging a behave test.",
					"default": true
				},
				"behave-vsc.runMultiRootProjectsInParallel": {
					"scope": "window",
					"type": "boolean",
					"markdownDescription": "For multi-root workspaces only. If enabled, then when behave tests are started for more than one project, they are run at the same time. This setting should be in your `*.code-workspace` file.",
					"default": true
				},
				"behave-vsc.multiRootRunWorkspacesInParallel": {
					"scope": "window",
					"type": "boolean",
					"default": true,
					"deprecationMessage": "IGNORED legacy setting. Please use \"runMultiRootProjectsInParallel\"."
				},
				"behave-vsc.runParallel": {
					"scope": "resource",
					"type": "boolean",
					"markdownDescription": "Specifies whether to create a separate behave instance for each feature and run those instances simultaneously (except when debugging). Leave this off for your initial run, then enable if you wish and your test setup supports it (i.e. your features are fully isolated).",
					"default": false
				},
				"behave-vsc.runProfiles": {
					"type": "array",
					"scope": "window",
					"markdownDescription": "A list of run profiles, used to set tags and environment variables for test runs. Applies globally on demand to ALL projects in the workspace. See example in readme.",
					"items": {
						"type": "object",
						"required": [
							"name"
						],
						"properties": {
							"name": {
								"type": "string",
								"markdownDescription": "The name of the run profile."
							},
							"env": {
								"type": "object",
								"additionalProperties": {
									"type": "string",
									"markdownDescription": "Key-value pairs of environment variable overrides (or additions) when this run profile is executed"
								}
							},
							"tagsParameters": {
								"type": "string"
							},
							"customRunner": {
								"type": "object",
								"required": [
									"scriptFile",
									"waitForJUnitFiles"
								],
								"markdownDescription": "Custom Python script to invoke instead of the default behave command. The script file must be in the root of your behave working directory. Command becomes: `python <script> behave <args> <behave args>`.",
								"properties": {
									"scriptFile": {
										"type": "string",
										"markdownDescription": "The name of the custom script file in the root of your behave working directory."
									},
									"args": {
										"type": "array",
										"items": {
											"type": "string"
										},
										"markdownDescription": "Additional arguments to pass to the custom script. These are passed after the `behave` command and before the behave arguments."
									},
									"waitForJUnitFiles": {
										"type": "boolean",
										"markdownDescription": "If true, the extension will wait for JUnit XML files to be created by the custom runner and update test results."
									}
								}
							}
						}
					}
				},
				"behave-vsc.xRay": {
					"scope": "window",
					"type": "boolean",
					"markdownDescription": "Specifies whether extension errors have stack traces, and whether diagnostics and performance are logged in console. The console output is viewable via the vscode command `Developer: Toggle Developer Tools`. Diagnostic logs are noisy, and may have a small performance impact.",
					"default": false
				}
			}
		},
		"commands": [
			{
				"command": "behave-vsc.gotoStep",
				"title": "Go to Step Definition"
			},
			{
				"command": "behave-vsc.findStepReferences",
				"title": "Find All Step References"
			},
			{
				"command": "behave-vsc.stepReferences.next",
				"title": "Step References: Next"
			},
			{
				"command": "behave-vsc.stepReferences.prev",
				"title": "Step References: Previous"
			}
		],
		"keybindings": [
			{
				"command": "behave-vsc.gotoStep",
				"key": "f12",
				"when": "!isInEmbeddedEditor && editorTextFocus && resourceExtname =~ /\\.feature$/"
			},
			{
				"command": "behave-vsc.findStepReferences",
				"key": "alt+f12",
				"when": "!isInEmbeddedEditor && editorTextFocus && resourceExtname =~ /\\.py$/ && (resourceDirname =~ /.*\\/steps/ || bvsc_StepLibsActive)"
			},
			{
				"command": "behave-vsc.stepReferences.next",
				"key": "f4",
				"when": "behave-vsc.stepReferences.navKeysEnabled"
			},
			{
				"command": "behave-vsc.stepReferences.prev",
				"key": "shift+f4",
				"when": "behave-vsc.stepReferences.navKeysEnabled"
			}
		],
		"languages": [
			{
				"id": "gherkin",
				"icon": {
					"light": "./images/gherkin.png",
					"dark": "./images/gherkin.png"
				},
				"extensions": [
					"feature"
				],
				"aliases": [
					"Gherkin",
					"behave",
					"Feature"
				],
				"configuration": "./gherkin.language-configuration.json"
			}
		],
		"grammars": [
			{
				"language": "gherkin",
				"scopeName": "gherkin.grammar",
				"path": "./gherkin.grammar.json"
			}
		],
		"snippets": [
			{
				"language": "gherkin",
				"path": "./gherkin.snippets.json"
			}
		],
		"configurationDefaults": {
			"editor.semanticTokenColorCustomizations": {
				"rules": {
					"missing_step": "#cf1036"
				}
			}
		},
		"menus": {
			"editor/context": [
				{
					"command": "behave-vsc.gotoStep",
					"group": "navigation",
					"when": "!isInEmbeddedEditor && editorTextFocus && resourceExtname =~ /\\.feature$/"
				},
				{
					"command": "behave-vsc.findStepReferences",
					"group": "navigation",
					"when": "!isInEmbeddedEditor && editorTextFocus && resourceExtname =~ /\\.py$/ && (resourceDirname =~ /.*\\/steps/ || bvsc_StepLibsActive)"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "StepReferences",
					"title": "Step References",
					"icon": "images/behave-vsc.png"
				}
			]
		},
		"views": {
			"StepReferences": [
				{
					"id": "StepReferences",
					"name": "Step References",
					"icon": "images/behave-vsc.png",
					"contextualTitle": "Step References",
					"when": "behave-vsc.stepReferences.visible"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "StepReferences",
				"contents": ""
			}
		]
	},
	"name": "behave-vsc",
	"displayName": "Behave VSC",
	"description": "Debug, Run and Navigate Python behave tests",
	"version": "0.7.0",
	"icon": "images/behave-vsc.png",
	"galleryBanner": {
		"color": "#2B2B2B",
		"theme": "dark"
	},
	"publisher": "jimasp",
	"private": true,
	"license": "SEE LICENSE IN LICENSE.txt",
	"homepage": "https://github.com/jimasp/behave-vsc/blob/main/README.md",
	"bugs": {
		"url": "https://github.com/jimasp/behave-vsc/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/jimasp/behave-vsc.git"
	},
	"engines": {
		"vscode": "^1.86.0"
	},
	"categories": [
		"Testing",
		"Debuggers"
	],
	"keywords": [
		"behave",
		"debug",
		"python",
		"feature",
		"bdd",
		"multi-root ready"
	],
	"qna": false,
	"extensionDependencies": [
		"ms-python.python"
	],
	"activationEvents": [
		"workspaceContains:**/*.feature"
	],
	"main": "./dist/extension.js",
	"scripts": {
		"prevscode:prepublish": "npm run test",
		"vscode:prepublish": "npm run package",
		"compile": "npm run clean-output && webpack",
		"watch": "npm run clean-output && webpack --watch",
		"package": "webpack --mode production --devtool hidden-source-map",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"lint": "eslint src --ext ts",
		"test": "node ./out/_tests/npmRunTest.js --stable",
		"pretest": "npm run compile && npm run compile-tests && npm run lint",
		"pretestinsiders": "npm run pretest",
		"testinsiders": "node ./out/_tests/npmRunTest.js --insiders",
		"rimraf": "./node_modules/rimraf/bin.js",
		"clean-output": "rimraf out/ dist/"
	},
	"devDependencies": {
		"@types/mocha": "^10.0.6",
		"@types/node": "^20.11.16",
		"@types/sinon": "^17.0.3",
		"@types/vscode": "^1.86.0",
		"@types/xml2js": "^0.4.14",
		"@typescript-eslint/eslint-plugin": "^6.21.0",
		"@typescript-eslint/parser": "^6.21.0",
		"@vscode/test-electron": "^2.3.9",
		"eslint": "^8.56.0",
		"glob": "^10.3.10",
		"mocha": "^10.2.0",
		"rimraf": "^5.0.5",
		"sinon": "^17.0.1",
		"ts-loader": "^9.5.1",
		"typescript": "^5.3.3",
		"webpack": "^5.90.1",
		"webpack-cli": "^5.1.4"
	},
	"dependencies": {
		"xml2js": "^0.6.2"
	}
}